import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', () => {
      expect(appController.getHello()).toBe('Hello World!');
    });
  });
});




/**üß™ Planejamento de Testes Unit√°rios - CRUD de Usu√°rios (TDD)
‚úÖ 1. Cadastrar Usu√°rio
Objetivo:
Verificar se um usu√°rio pode ser cadastrado corretamente, respeitando regras de neg√≥cio.

Passos:
Preparar o cen√°rio (Arrange):

Criar um input v√°lido de usu√°rio (nome, email, senha, etc.).

Garantir que o e-mail ainda n√£o exista no banco.

Executar a a√ß√£o (Act):

Chamar a fun√ß√£o/m√©todo de cadastro.

Verificar o resultado (Assert):

Esperar que o retorno seja o objeto do usu√°rio criado.

Verificar se o ID foi gerado.

Validar que os campos foram salvos corretamente.

Casos negativos (tamb√©m devem ser testados):
E-mail j√° existe:

Deve lan√ßar um erro (ex: "Usu√°rio j√° existe").

Erro no banco (ex: falha de conex√£o):

Deve lan√ßar exce√ß√£o apropriada.

‚ùå 2. Deletar (Desabilitar) Usu√°rio
Objetivo:
Desabilitar um usu√°rio existente (soft delete).

Passos:
Preparar o cen√°rio:

Inserir um usu√°rio existente com status ativo.

Executar a a√ß√£o:

Chamar a fun√ß√£o de desabilitar passando o ID.

Verificar o resultado:

O status do usu√°rio deve ser alterado para "desabilitado" (ou ativo: false).

O usu√°rio ainda deve existir no banco (soft delete).

Casos negativos:
ID n√£o encontrado:

Deve lan√ßar um erro "Usu√°rio n√£o encontrado".

üîç 3. Buscar Usu√°rios por Empresa
Objetivo:
Listar usu√°rios ativos de uma empresa espec√≠fica.

Passos:
Preparar o cen√°rio:

Inserir uma empresa v√°lida.

Associar usu√°rios √† empresa (alguns ativos, outros desabilitados).

Executar a a√ß√£o:

Chamar a fun√ß√£o de listagem com o ID da empresa.

Verificar o resultado:

Deve retornar apenas usu√°rios ativos da empresa.

Verificar que o resultado √© um array com os campos corretos.

Casos negativos:
Empresa n√£o encontrada:

Deve lan√ßar erro "Empresa n√£o encontrada".

Empresa sem usu√°rios:

Deve retornar array vazio.

‚úèÔ∏è 4. Editar Usu√°rio
Objetivo:
Alterar os dados permitidos de um usu√°rio (ex: nome, telefone, etc.).

Passos:
Preparar o cen√°rio:

Inserir um usu√°rio v√°lido no banco.

Executar a a√ß√£o:

Chamar a fun√ß√£o de edi√ß√£o com o ID e os novos dados v√°lidos.

Verificar o resultado:

Verificar se os dados foram atualizados corretamente.

Verificar se os dados n√£o permitidos (ex: e-mail, senha, etc., se n√£o edit√°veis) n√£o foram alterados.

Casos negativos:
Usu√°rio n√£o encontrado:

Deve lan√ßar erro "Usu√°rio n√£o encontrado".

Tentativa de alterar campo n√£o permitido:

Deve lan√ßar erro ou ignorar altera√ß√£o.
 */
